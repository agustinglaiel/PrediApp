basePath: /api
definitions:
  dto.UserLoginRequestDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserResponseDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      role:
        type: string
      score:
        type: integer
      username:
        type: string
    type: object
  dto.UserSignUpRequestDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  dto.UserUpdateRequestDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      is_active:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      username:
        type: string
    type: object
host: localhost:8057
info:
  contact: {}
  description: API documentation for the Users microservice.
  title: Users Microservice API
  version: "1.0"
paths:
  /users:
    get:
      description: Retrieves all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponseDTO'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all users
      tags:
      - Users
  /users/{id}:
    delete:
      description: Deletes a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema: {}
      summary: Delete user by ID
      tags:
      - Users
    get:
      description: Retrieves a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "404":
          description: Not Found
          schema: {}
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Update user by ID
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: User login details
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserLoginRequestDTO'
        "401":
          description: Unauthorized
          schema: {}
      summary: Log in a user
      tags:
      - Users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account in the system
      parameters:
      - description: User sign-up details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserSignUpRequestDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Bad Request
          schema: {}
      summary: Register a new user
      tags:
      - Users
  /users/username/{username}:
    get:
      description: Retrieves a user's details by their username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "404":
          description: Not Found
          schema: {}
      summary: Get user by username
      tags:
      - Users
swagger: "2.0"
